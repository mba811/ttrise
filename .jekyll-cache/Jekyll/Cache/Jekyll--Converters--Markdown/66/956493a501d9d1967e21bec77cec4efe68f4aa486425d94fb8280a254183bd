I"…^<aside>
    <ol>
        <li><a href="#one">Module structure &amp; index.js</a></li>
        <li><a href="#two">Command line interface</a></li>
        <li><a href="#three">Using dependencies</a></li>
        <li><a href="#four">Parameters &amp; callbacks</a></li>
        <li><a href="#five">Publishing</a></li>
    </ol>
</aside>

<p>Writing a node module can be a bit complex. There are a number of subjective decisions that come into play, which can make learning from existing modules difficult. I find it easiest to start from the bare minimum, increasing functionality only when the need arrises.</p>

<p>This post will go through some major components of a node module, including:</p>

<ol>
  <li>a light-weight structure for your module and supporting files</li>
  <li>registering dependencies: using other node modules as helpers</li>
  <li>how to turn your module into a bash command so you can use it in your terminal</li>
  <li>how to deploy your module to <code class="language-plaintext highlighter-rouge">npm</code>‚Äôs registry.</li>
</ol>

<p>Writing a node module requires Node.js on your computer. You can download that at <a href="https://nodejs.org">nodejs.org</a>.</p>

<div id="one"></div>

<h1 id="1-module-structure--indexjs">1. Module structure &amp; <code class="language-plaintext highlighter-rouge">index.js</code></h1>

<p>The structure of a node module was the biggest hurdle for me to get over. There are a lot of files, and things linking back and forth. The major structure I like to use keeps things clean at the root level. For the rest of this post, let‚Äôs assume we are creating a module called <code class="language-plaintext highlighter-rouge">timebuddy</code> that has the user input a date, and return in a javascript-friendly format (thanks, buddy). You can download this module <a href="https://github.com/mapsam/timebuddy">here</a>.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">timebuddy</span><span class="o">/</span>       <span class="c1"># root directory, named after your module
</span> <span class="o">-</span> <span class="n">index</span><span class="p">.</span><span class="n">js</span>      <span class="c1"># main file
</span> <span class="o">-</span> <span class="n">package</span><span class="p">.</span><span class="n">json</span>  <span class="c1"># information about your module and dependencies
</span> <span class="o">-</span> <span class="n">timebuddy</span>     <span class="c1"># (optional) a file representing a bash command, used for CLI
</span> <span class="o">-</span> <span class="n">src</span><span class="o">/</span>          <span class="c1"># (optional) additional custom files for keeping index.js clean
</span> <span class="o">-</span> <span class="n">test</span><span class="o">/</span>         <span class="c1"># (optional) directory hosting all of your test related code
</span></code></pre></div></div>

<h3 id="packagejson"><code class="language-plaintext highlighter-rouge">package.json</code></h3>

<p>This file is unique to libraries using Node in some capacity. It doesn‚Äôt mean a library is a module, though. In order to generate this file dynamically,  enter <code class="language-plaintext highlighter-rouge">npm init</code> into your terminal and follow the prompts. It can be changed later so don‚Äôt feel pressure to get it all right at first.</p>

<blockquote>
  <p>Every Node module requires a <code class="language-plaintext highlighter-rouge">package.json</code> but not every <code class="language-plaintext highlighter-rouge">package.json</code> file is for a unique module</p>
</blockquote>

<p>You can use Node in many different ways, and a <code class="language-plaintext highlighter-rouge">package.json</code> file purely denotes that you are using some Node libraries to make your job easier. A core piece of <code class="language-plaintext highlighter-rouge">package.json</code> is to list out dependencies.</p>

<p>If you install a Node module or a project using Node, you‚Äôll notice a <code class="language-plaintext highlighter-rouge">node_modules/</code> directory that includes a fair number of libraries depending on the size of your project. This is generated dynamically by taking the list of dependencies from your <code class="language-plaintext highlighter-rouge">package.json</code> file, the version number, and installing from their repsective repositories. This way you can always keep things up to date as the authors make changes.</p>

<h3 id="creating-indexjs">Creating <code class="language-plaintext highlighter-rouge">index.js</code></h3>

<p>Create a file named <code class="language-plaintext highlighter-rouge">index.js</code>. This is where it all happens. Just like <code class="language-plaintext highlighter-rouge">index.html</code> being the priamary file in a webpage, <code class="language-plaintext highlighter-rouge">index.js</code> is the primary file in a Node module. Let‚Äôs start by logging a generated time string to the user:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">timebuddy</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">date</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">();</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">date</span><span class="p">);</span>
<span class="p">}</span>

<span class="nx">timebuddy</span><span class="p">();</span>
</code></pre></div></div>

<p>Let‚Äôs execute this file. You can run it in your terminal by entering <code class="language-plaintext highlighter-rouge">node index.js</code>. Wham! The time! That‚Äôs neat. This isn‚Äôt particualarly ‚Äúnode friendly‚Äù though. In order to do that, we want to export timebuddy as a module, not just as a logging function.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="dl">'</span><span class="s1">use strict</span><span class="dl">'</span><span class="p">;</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">timebuddy</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">timebuddy</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">date</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">();</span>
    <span class="k">return</span> <span class="nx">date</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><em>Notice that we are returning <code class="language-plaintext highlighter-rouge">date</code> above, instead of logging it.</em></p>

<h3 id="moduleexports"><code class="language-plaintext highlighter-rouge">module.exports</code></h3>

<p>What‚Äôs going on here? What is this <code class="language-plaintext highlighter-rouge">module.exports</code> business? In order for Node to recognize <code class="language-plaintext highlighter-rouge">time</code> as a unique library, we want to export it to be used later. You‚Äôll notice if you run <code class="language-plaintext highlighter-rouge">node index.js</code> now, it will not log to the terminal. Hm. How can we get this to work? We need to do a couple of things:</p>

<ol>
  <li>Use <code class="language-plaintext highlighter-rouge">timebuddy</code> in a file, which we can do through a</li>
  <li>command line interface</li>
</ol>

<div id="two"></div>

<h1 id="2-command-line-interface">2. Command line interface</h1>

<p>In order to make this run effectively on the command line, we have to do a couple of things.</p>

<ol>
  <li>create a file named <code class="language-plaintext highlighter-rouge">timebuddy</code> without a file extension.</li>
  <li>Add a new section to <code class="language-plaintext highlighter-rouge">package.json</code> for naming you bash command</li>
  <li><code class="language-plaintext highlighter-rouge">npm link</code> your module‚Äôs <code class="language-plaintext highlighter-rouge">index.js</code> file to a bash command on your local machine</li>
</ol>

<h3 id="timebuddy-file"><code class="language-plaintext highlighter-rouge">timebuddy</code> file</h3>

<p>Add <code class="language-plaintext highlighter-rouge">#!/usr/bin/env node</code> to the top, which tells your computer to execute as a node file, which is why we don‚Äôt need a <code class="language-plaintext highlighter-rouge">.js</code> extension.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#!/usr/bin/env node
</span>
<span class="kd">var</span> <span class="nx">timebuddy</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// imports index.js functionality</span>

<span class="kd">var</span> <span class="nx">now</span> <span class="o">=</span> <span class="nx">timebuddy</span><span class="p">();</span>         <span class="c1">// stores response in a variable</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">now</span><span class="p">);</span>              <span class="c1">// logs now to terminal</span>
</code></pre></div></div>

<h3 id="add-a-bin-command-to-packagejson">Add a <code class="language-plaintext highlighter-rouge">bin</code> command to <code class="language-plaintext highlighter-rouge">package.json</code></h3>

<p>New bash command called <code class="language-plaintext highlighter-rouge">timebuddy</code> executes the file created above using node, denoted by the first line.</p>

<pre><code class="language-JSON">"bin": {
    "timebuddy": "./timebuddy"
},
</code></pre>

<h3 id="link-your-project-to-your-local-bash-commands">Link your project to your local bash commands</h3>

<p>This makes development easier, and will link all of your executing bash commands to <code class="language-plaintext highlighter-rouge">index.js</code> so you don‚Äôt have to continually recreate the files. Run <code class="language-plaintext highlighter-rouge">npm link</code> in your terminal at the root of the project. This should ouput some information showing where <code class="language-plaintext highlighter-rouge">/usr/local/bin</code> is pointing to as a source executable.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>npm <span class="nb">link</span>
/usr/local/bin/timebuddy -&gt; /usr/local/lib/node_modules/timebuddy/timebuddy
/usr/local/lib/node_modules/timebuddy -&gt; /Users/mapsam/github/timebuddy
</code></pre></div></div>

<p>Assuming no errors (typically related to permissions when writing to <code class="language-plaintext highlighter-rouge">/usr/local/bin</code> you should now be able to run <code class="language-plaintext highlighter-rouge">timebuddy</code> in your terminal and get the date back!</p>

<p>What‚Äôs really cool about the above, is that we are using <code class="language-plaintext highlighter-rouge">timebuddy</code> as a function to do some work for us, and logging it in a separate file. This means we can have different functionalty in our bash command versus the module, which just returns a value.</p>

<div id="three"></div>

<h1 id="3-using-dependencies">3. Using dependencies</h1>

<p>Dependencies are the foundation of Node modules. You can use other Node modules in your own in order to take functionality from other libraries. This keeps code clean, modular, and prevents developers from rewriting functionality across different modules.</p>

<h3 id="require"><code class="language-plaintext highlighter-rouge">require()</code></h3>

<p>Similar to python where you can <code class="language-plaintext highlighter-rouge">import</code> different libraries, Node allows you to do this with <code class="language-plaintext highlighter-rouge">require</code> statements, which keeps your files clean from clutter of other, potentially huge libraries. We used <code class="language-plaintext highlighter-rouge">require</code> above to import our own work, which means you can require external libraries as well as internal.</p>

<div id="four"></div>

<h1 id="4-parameters--callbacks">4. Parameters &amp; callbacks</h1>

<h3 id="parameters">Parameters</h3>

<p>To make <code class="language-plaintext highlighter-rouge">timebuddy</code> more robust, we want to allow the user to add some parameters to return the time in a particular format. First, we‚Äôll allow the user to add their own date string since maybe everyone won‚Äôt need the time <em>right now</em> but the time at another point. It will look something like this:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="dl">'</span><span class="s1">use strict</span><span class="dl">'</span><span class="p">;</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">timebuddy</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">timebuddy</span><span class="p">(</span><span class="nx">time</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">time</span> <span class="o">=</span> <span class="p">(</span><span class="nx">time</span> <span class="p">?</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="nx">time</span><span class="p">)</span> <span class="p">:</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">());</span>
    <span class="k">return</span> <span class="nx">time</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Update the bash version to include a date as a parameter:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#!/usr/bin/env node
</span>
<span class="kd">var</span> <span class="nx">timebuddy</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">christmas</span> <span class="o">=</span> <span class="nx">timebuddy</span><span class="p">(</span><span class="dl">'</span><span class="s1">12/25/2015</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">christmas</span><span class="p">);</span>
</code></pre></div></div>

<p>Now, instead of the time being today, we ONLY return the date of Christmas in 2015. That‚Äôs not particularly helpful, but you can hopefully see where this is going. Our function in <code class="language-plaintext highlighter-rouge">index.js</code> is great - it returns an input. But our bash command is reliant on us <em>knowing</em> a date before we can run the <code class="language-plaintext highlighter-rouge">timebuddy()</code> function. How do we allow the user to specify inputs on the command line?</p>

<h3 id="cli-parameters">CLI parameters</h3>

<p>Introduction <code class="language-plaintext highlighter-rouge">process.argv</code>. This is a built-in part of node that allows you to access different portions of the process during run-time. We can get parameters this way via <code class="language-plaintext highlighter-rouge">argv</code> which is an array representation of arguments passed. The first value is always <code class="language-plaintext highlighter-rouge">Node</code>, the second is <strong>__</strong>_, and the rest are order of parameters given by the user.</p>

<p>If we want <code class="language-plaintext highlighter-rouge">timebuddy "12/25/2015"</code> to work, we‚Äôll have to capture the argument and pass it into our function.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#!/usr/bin/env node
</span>
<span class="kd">var</span> <span class="nx">timebuddy</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">userInput</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
<span class="kd">var</span> <span class="nx">time</span> <span class="o">=</span> <span class="nx">timebuddy</span><span class="p">(</span><span class="nx">userInput</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">time</span><span class="p">);</span>
</code></pre></div></div>

<p>Huzzah! Now we are taking user inputs and passing them into Node functions. What a time to be alive.</p>

<h3 id="callbacks">Callbacks</h3>

<p>Sometimes callbacks are helpful ways of executing information and allowing the user to handle the reponse <em>only when the module has finished running</em>. Let‚Äôs say <code class="language-plaintext highlighter-rouge">timebuddy</code> becomes particularly robust and takes a while to execute, we wouldn‚Äôt want to let the user go forward until we have returned something useful. What if we error out? We should also tell the user that. Callbacks allow us to build this, so we can run code syncronously, in Node‚Äôs asyncronous environment.</p>

<p>Update <code class="language-plaintext highlighter-rouge">index.js</code> to take one more parameter, a callback.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>'use strict';

module.exports = timebuddy;

function timebuddy(time, callback) {
    var time = (time ? new Date(time) : new Date());
    callback(null, time);
}
</code></pre></div></div>

<p>Notice how we pass <code class="language-plaintext highlighter-rouge">null</code> with our callback, it‚Äôs good practice to pass in errors as the first parameter in Node. This allows the user to constantly check for errors. Right now, if we get to running the callback successfully, we want to pass a <code class="language-plaintext highlighter-rouge">null</code> error since everything looks great. Let‚Äôs update our bash command now:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#!/usr/bin/env node
</span>
<span class="kd">var</span> <span class="nx">timebuddy</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">userInput</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
<span class="nx">timebuddy</span><span class="p">(</span><span class="nx">userInput</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="k">throw</span> <span class="nx">error</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">response</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>

<p>The above passes an anonymous function through as a callback with two parameters <code class="language-plaintext highlighter-rouge">error</code> and <code class="language-plaintext highlighter-rouge">response</code>. We can check if there is an error, and then handle the response.</p>

<h3 id="extra-stuff">Extra stuff</h3>

<p>Writing a bunch of different functions and wanting to keep <code class="language-plaintext highlighter-rouge">index.js</code> short? I find it particularly helpful to write any extended functionality in the <code class="language-plaintext highlighter-rouge">src/</code> directory. Let‚Äôs say we create a file called <code class="language-plaintext highlighter-rouge">month.js</code> in the <code class="language-plaintext highlighter-rouge">src/</code> directory and want to use it in <code class="language-plaintext highlighter-rouge">index.js</code>. Go ahead and create it, then import it using <code class="language-plaintext highlighter-rouge">require</code>.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="dl">'</span><span class="s1">use strict</span><span class="dl">'</span><span class="p">;</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">timebuddy</span><span class="p">;</span>

<span class="kd">var</span> <span class="nx">month</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./src/month.js</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">function</span> <span class="nx">timebuddy</span><span class="p">(</span><span class="nx">time</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">time</span> <span class="o">=</span> <span class="p">(</span><span class="nx">time</span> <span class="p">?</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="nx">time</span><span class="p">)</span> <span class="p">:</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">());</span>
    <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">time</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This gives you the ability to break code apart into distinct groups of functionality. It‚Äôs great for keeping code clean, easy to read, and testable. I highly recommend using <code class="language-plaintext highlighter-rouge">tap</code> for testing node modules.</p>

<div id="five"></div>

<h1 id="5-publishing">5. Publishing</h1>

<p>Publishing your node module is the final way to give it a home at <a href="https://npmjs.org/registry/timebuddy">npmjs.org/registry/timebuddy</a>. Setting up your npm account is straightforward - make an account at <code class="language-plaintext highlighter-rouge">npmjs.org</code> - and add it as your default settings in <code class="language-plaintext highlighter-rouge">npm</code> on your computer. To publish your module, which will allow other people to <code class="language-plaintext highlighter-rouge">npm install timebuddy</code> from the registry, you can run <code class="language-plaintext highlighter-rouge">npm publish</code>. This will check for version changes and add all of the information from your <code class="language-plaintext highlighter-rouge">package.json</code> as data to the site. Don‚Äôt forget to add a proper <code class="language-plaintext highlighter-rouge">README.md</code> file so people know what your module can do.</p>

<hr />

<p>That‚Äôs it! I get a lot of my inspiration from the way Mapbox structures their modules. Simple, single functionality, and highly testable.</p>
:ET